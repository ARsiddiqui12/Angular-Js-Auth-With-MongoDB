{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isUserLoggedIn = false;\n  }\n  login(userName, password) {\n    console.log(userName);\n    console.log(password);\n    const VerifyLoginUrl = \"http://localhost:8081/login/check\";\n    const LoginCredentials = {\n      userName: userName,\n      password: password\n    };\n    this.http.post(VerifyLoginUrl, LoginCredentials).subscribe(response => {\n      if (response.code == 200) {\n        localStorage.setItem('isUserLoggedIn', response.isLoggedIn);\n        this.isUserLoggedIn = response.isLoggedIn;\n        console.log(response.isLoggedIn, \"api response\");\n      }\n    });\n    return of(this.isUserLoggedIn);\n  }\n  logout() {\n    this.isUserLoggedIn = false;\n    localStorage.removeItem('isUserLoggedIn');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAqB,MAAM;;;AAclD,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAExB,mBAAc,GAAY,KAAK;EAFQ;EAIvCC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IAEtCC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IACrBE,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IAEtB,MAAMG,cAAc,GAAE,mCAAmC;IAEzD,MAAMC,gBAAgB,GAAG;MACxBL,QAAQ,EAACA,QAAQ;MACjBC,QAAQ,EAACA;KACV;IAED,IAAI,CAACH,IAAI,CAACQ,IAAI,CAACF,cAAc,EAAEC,gBAAgB,CAAC,CAACE,SAAS,CAAEC,QAAY,IAAI;MAE1E,IAAGA,QAAQ,CAACC,IAAI,IAAE,GAAG,EACrB;QACEC,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAACH,QAAQ,CAACI,UAAU,CAAC;QAE1D,IAAI,CAACC,cAAc,GAAGL,QAAQ,CAACI,UAAU;QAEzCV,OAAO,CAACC,GAAG,CAACK,QAAQ,CAACI,UAAU,EAAC,cAAc,CAAC;;IAGnD,CAAC,CAAC;IAGF,OAAOjB,EAAE,CAAC,IAAI,CAACkB,cAAc,CAAC;EAG/B;EAEAC,MAAM;IACL,IAAI,CAACD,cAAc,GAAG,KAAK;IACxBH,YAAY,CAACK,UAAU,CAAC,gBAAgB,CAAC;EAC5C;;AAxCWnB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAHV;AAAM","names":["of","AuthService","constructor","http","login","userName","password","console","log","VerifyLoginUrl","LoginCredentials","post","subscribe","response","code","localStorage","setItem","isLoggedIn","isUserLoggedIn","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Admin\\Desktop\\angularjs\\authapp\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable, of, throwError  } from 'rxjs';\n\nimport { tap, delay } from 'rxjs/operators';\n\nimport { catchError, retry } from 'rxjs/operators';\n\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { JsonPipe } from '@angular/common';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthService {\n\n  constructor(private http:HttpClient) { }\n\n  isUserLoggedIn: boolean = false;\n\n  login(userName: string, password: string): Observable<any> {\n\n    console.log(userName);\n    console.log(password);\n\n   const VerifyLoginUrl =\"http://localhost:8081/login/check\";\n\n   const LoginCredentials = {\n    userName:userName,\n    password:password\n  };\n\n  this.http.post(VerifyLoginUrl, LoginCredentials).subscribe((response:any) => {\n\n    if(response.code==200)\n    {\n      localStorage.setItem('isUserLoggedIn',response.isLoggedIn); \n\n      this.isUserLoggedIn = response.isLoggedIn;\n\n      console.log(response.isLoggedIn,\"api response\");\n    }\n  \n  });\n   \n\n  return of(this.isUserLoggedIn);\n   \n    \n }\n\n logout() {\n  this.isUserLoggedIn = false;\n     localStorage.removeItem('isUserLoggedIn'); \n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}