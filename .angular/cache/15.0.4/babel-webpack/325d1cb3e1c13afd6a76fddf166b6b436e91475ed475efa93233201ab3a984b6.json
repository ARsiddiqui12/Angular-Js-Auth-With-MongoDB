{"ast":null,"code":"import { of } from 'rxjs';\nimport { tap, delay } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isUserLoggedIn = false;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Credentials': 'true',\n        'Access-Control-Allow-Headers': 'Content-Type',\n        'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE'\n      })\n    };\n  }\n  login(userName, password) {\n    console.log(userName);\n    console.log(password);\n    var obj = {\n      userName: userName\n    };\n    this.http.post('http://localhost:8081/login/check', obj).subscribe(response => console.log(response), error => console.log(error));\n    // const httpOptions = {\n    //   headers: new HttpHeaders({\n    //     'Content-Type': 'application/json'\n    //   })\n    // };\n    //return this.http.post('http://localhost:8081/login/check', JSON.stringify({userName:userName,password:password}), this.httpOptions);\n    //   this.http.post(\"http://localhost:8081/login/check\",JSON.stringify({userName:userName,password:password}), this.httpOptions) \n    //  .subscribe( (data) => console.log(data,\"hello world\") )\n    //   this.isUserLoggedIn = userName == 'admin' && password == 'admin';\n    //   localStorage.setItem('isUserLoggedIn', this.isUserLoggedIn ? \"true\" : \"false\"); \n    return of(this.isUserLoggedIn).pipe(delay(1000), tap(val => {\n      console.log(\"Is User Authentication is successful: \" + val);\n    }));\n  }\n  logout() {\n    this.isUserLoggedIn = false;\n    localStorage.removeItem('isUserLoggedIn');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAqB,MAAM;AAElD,SAASC,GAAG,EAAEC,KAAK,QAAQ,gBAAgB;AAI3C,SAAqBC,WAAW,QAA2B,sBAAsB;;;AAQjF,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAExB,mBAAc,GAAY,KAAK;IAE9B,gBAAW,GAAG;MACbC,OAAO,EAAE,IAAIJ,WAAW,CAAE;QACxB,cAAc,EAAE,kBAAkB;QACxB,6BAA6B,EAAE,GAAG;QAClC,kCAAkC,EAAE,MAAM;QAC1C,8BAA8B,EAAE,cAAc;QAC9C,8BAA8B,EAAE;OAC3C;KACH;EAZuC;EAgBvCK,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IAEtCC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IACrBE,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IAErB,IAAIG,GAAG,GAAG;MAACJ,QAAQ,EAACA;IAAQ,CAAC;IAE7B,IAAI,CAACH,IAAI,CAACQ,IAAI,CAAC,mCAAmC,EAAED,GAAG,CAAC,CAACE,SAAS,CAC/DC,QAAQ,IAAKL,OAAO,CAACC,GAAG,CAACI,QAAQ,CAAC,EAClCC,KAAK,IAAKN,OAAO,CAACC,GAAG,CAACK,KAAK,CAAC,CAC9B;IAKD;IACA;IACA;IACA;IACA;IAEA;IAEF;IACA;IAEA;IACA;IAEE,OAAOjB,EAAE,CAAC,IAAI,CAACkB,cAAc,CAAC,CAACC,IAAI,CAC/BjB,KAAK,CAAC,IAAI,CAAC,EACXD,GAAG,CAACmB,GAAG,IAAG;MACRT,OAAO,CAACC,GAAG,CAAC,wCAAwC,GAAGQ,GAAG,CAAC;IAC7D,CAAC,CAAC,CACL;EAEJ;EAEAC,MAAM;IACL,IAAI,CAACH,cAAc,GAAG,KAAK;IACxBI,YAAY,CAACC,UAAU,CAAC,gBAAgB,CAAC;EAC5C;;AA3DWnB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAHV;AAAM","names":["of","tap","delay","HttpHeaders","AuthService","constructor","http","headers","login","userName","password","console","log","obj","post","subscribe","response","error","isUserLoggedIn","pipe","val","logout","localStorage","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Admin\\Desktop\\angularjs\\authapp\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable, of, throwError  } from 'rxjs';\n\nimport { tap, delay } from 'rxjs/operators';\n\nimport { catchError, retry } from 'rxjs/operators';\n\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { JsonPipe } from '@angular/common';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthService {\n\n  constructor(private http:HttpClient) { }\n\n  isUserLoggedIn: boolean = false;\n\n   httpOptions = {\n    headers: new HttpHeaders( { \n      'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Credentials': 'true',\n                'Access-Control-Allow-Headers': 'Content-Type',\n                'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE'\n    })\n };\n\n  \n\n  login(userName: string, password: string): Observable<any> {\n\n    console.log(userName);\n    console.log(password);\n\n    var obj = {userName:userName};\n\n    this.http.post('http://localhost:8081/login/check', obj).subscribe(\n      (response) => console.log(response),\n      (error) => console.log(error)\n    )\n\n    \n\n     \n    // const httpOptions = {\n    //   headers: new HttpHeaders({\n    //     'Content-Type': 'application/json'\n    //   })\n    // };\n\n    //return this.http.post('http://localhost:8081/login/check', JSON.stringify({userName:userName,password:password}), this.httpOptions);\n\n  //   this.http.post(\"http://localhost:8081/login/check\",JSON.stringify({userName:userName,password:password}), this.httpOptions) \n  //  .subscribe( (data) => console.log(data,\"hello world\") )\n   \n  //   this.isUserLoggedIn = userName == 'admin' && password == 'admin';\n  //   localStorage.setItem('isUserLoggedIn', this.isUserLoggedIn ? \"true\" : \"false\"); \n\n    return of(this.isUserLoggedIn).pipe(\n        delay(1000),\n        tap(val => { \n          console.log(\"Is User Authentication is successful: \" + val); \n        })\n    );\n    \n }\n\n logout() {\n  this.isUserLoggedIn = false;\n     localStorage.removeItem('isUserLoggedIn'); \n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}