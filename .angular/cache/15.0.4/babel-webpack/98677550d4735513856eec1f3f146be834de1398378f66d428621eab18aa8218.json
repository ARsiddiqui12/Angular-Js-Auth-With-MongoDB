{"ast":null,"code":"import { of } from 'rxjs';\nimport { tap, delay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isUserLoggedIn = false;\n  }\n  login(userName, password) {\n    console.log(userName);\n    console.log(password);\n    const VerifyLoginUrl = \"http://localhost:8081/login/check\";\n    const LoginCredentials = {\n      userName: userName,\n      password: password\n    };\n    this.http.post(VerifyLoginUrl, LoginCredentials).subscribe(response => {\n      if (response.code == 200) {\n        this.isUserLoggedIn = response.isLoggedIn;\n        console.log(response.isLoggedIn, \"check status\");\n        localStorage.setItem('isUserLoggedIn', this.isUserLoggedIn ? \"true\" : \"false\");\n        return of(this.isUserLoggedIn).pipe(delay(1000), tap(val => {\n          console.log(\"Is User Authentication is successful: \" + val);\n        }));\n      }\n    });\n    //   this.isUserLoggedIn = userName == 'admin' && password == 'admin';\n    //   localStorage.setItem('isUserLoggedIn', this.isUserLoggedIn ? \"true\" : \"false\"); \n  }\n\n  logout() {\n    this.isUserLoggedIn = false;\n    localStorage.removeItem('isUserLoggedIn');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,QAAqB,MAAM;AAElD,SAASC,GAAG,EAAEC,KAAK,QAAQ,gBAAgB;;;AAY3C,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAExB,mBAAc,GAAY,KAAK;EAFQ;EAIvCC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IAEtCC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IACrBE,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IAEtB,MAAMG,cAAc,GAAE,mCAAmC;IAEzD,MAAMC,gBAAgB,GAAG;MACxBL,QAAQ,EAACA,QAAQ;MACjBC,QAAQ,EAACA;KACV;IAED,IAAI,CAACH,IAAI,CAACQ,IAAI,CAACF,cAAc,EAAEC,gBAAgB,CAAC,CAACE,SAAS,CAAEC,QAAY,IAAI;MAE1E,IAAGA,QAAQ,CAACC,IAAI,IAAE,GAAG,EACrB;QACE,IAAI,CAACC,cAAc,GAAGF,QAAQ,CAACG,UAAU;QAEzCT,OAAO,CAACC,GAAG,CAACK,QAAQ,CAACG,UAAU,EAAC,cAAc,CAAC;QAE/CC,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAACH,cAAc,GAAG,MAAM,GAAG,OAAO,CAAC;QAE9E,OAAOjB,EAAE,CAAC,IAAI,CAACiB,cAAc,CAAC,CAACI,IAAI,CACjCnB,KAAK,CAAC,IAAI,CAAC,EACXD,GAAG,CAACqB,GAAG,IAAG;UACRb,OAAO,CAACC,GAAG,CAAC,wCAAwC,GAAGY,GAAG,CAAC;QAC7D,CAAC,CAAC,CACL;;IAGH,CAAC,CAAC;IAEF;IACA;EAID;;EAEAC,MAAM;IACL,IAAI,CAACN,cAAc,GAAG,KAAK;IACxBE,YAAY,CAACK,UAAU,CAAC,gBAAgB,CAAC;EAC5C;;AAhDWrB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAsB,SAAXtB,WAAW;EAAAuB,YAHV;AAAM","names":["of","tap","delay","AuthService","constructor","http","login","userName","password","console","log","VerifyLoginUrl","LoginCredentials","post","subscribe","response","code","isUserLoggedIn","isLoggedIn","localStorage","setItem","pipe","val","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Admin\\Desktop\\angularjs\\authapp\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable, of, throwError  } from 'rxjs';\n\nimport { tap, delay } from 'rxjs/operators';\n\nimport { catchError, retry } from 'rxjs/operators';\n\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { JsonPipe } from '@angular/common';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthService {\n\n  constructor(private http:HttpClient) { }\n\n  isUserLoggedIn: boolean = false;\n\n  login(userName: string, password: string): Observable<any> {\n\n    console.log(userName);\n    console.log(password);\n\n   const VerifyLoginUrl =\"http://localhost:8081/login/check\";\n\n   const LoginCredentials = {\n    userName:userName,\n    password:password\n  };\n\n  this.http.post(VerifyLoginUrl, LoginCredentials).subscribe((response:any) => {\n\n    if(response.code==200)\n    {\n      this.isUserLoggedIn = response.isLoggedIn;\n\n      console.log(response.isLoggedIn,\"check status\");\n\n      localStorage.setItem('isUserLoggedIn', this.isUserLoggedIn ? \"true\" : \"false\"); \n\n      return of(this.isUserLoggedIn).pipe(\n        delay(1000),\n        tap(val => { \n          console.log(\"Is User Authentication is successful: \" + val); \n        })\n    );\n    }\n  \n  });\n   \n  //   this.isUserLoggedIn = userName == 'admin' && password == 'admin';\n  //   localStorage.setItem('isUserLoggedIn', this.isUserLoggedIn ? \"true\" : \"false\"); \n\n    \n    \n }\n\n logout() {\n  this.isUserLoggedIn = false;\n     localStorage.removeItem('isUserLoggedIn'); \n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}