{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { tap, delay } from 'rxjs/operators';\nimport { catchError, retry } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.isUserLoggedIn = false;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Credentials': 'true',\n        'Access-Control-Allow-Headers': 'Content-Type',\n        'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE'\n      })\n    };\n  }\n  httpErrorHandler(error) {\n    if (error.error instanceof ErrorEvent) {\n      console.error(\"A client side error occurs. The error message is \" + error.message);\n    } else {\n      console.error(\"An error happened in server. The HTTP status code is \" + error.status + \" and the error returned is \" + error.message);\n    }\n    return throwError(\"Error occurred. Pleas try again\");\n  }\n  login(userName, password) {\n    console.log(userName);\n    console.log(password);\n    this.http.post(\"http://localhost:8081/login/check\", {\n      userName: userName,\n      password: password\n    }, this.httpOptions).pipe(retry(1), catchError(this.httpErrorHandler)).subscribe(data => console.log(data, \"hello world\"));\n    this.isUserLoggedIn = userName == 'admin' && password == 'admin';\n    localStorage.setItem('isUserLoggedIn', this.isUserLoggedIn ? \"true\" : \"false\");\n    return of(this.isUserLoggedIn).pipe(delay(1000), tap(val => {\n      console.log(\"Is User Authentication is successful: \" + val);\n    }));\n  }\n  logout() {\n    this.isUserLoggedIn = false;\n    localStorage.removeItem('isUserLoggedIn');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,EAAE,EAAEC,UAAU,QAAS,MAAM;AAElD,SAASC,GAAG,EAAEC,KAAK,QAAQ,gBAAgB;AAE3C,SAASC,UAAU,EAAEC,KAAK,QAAQ,gBAAgB;AAElD,SAAqBC,WAAW,QAA2B,sBAAsB;;;AAOjF,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAExB,mBAAc,GAAY,KAAK;IAE9B,gBAAW,GAAG;MACbC,OAAO,EAAE,IAAIJ,WAAW,CAAE;QACxB,cAAc,EAAE,kBAAkB;QACxB,6BAA6B,EAAE,GAAG;QAClC,kCAAkC,EAAE,MAAM;QAC1C,8BAA8B,EAAE,cAAc;QAC9C,8BAA8B,EAAE;OAC3C;KACH;EAZuC;EAchCK,gBAAgB,CAAEC,KAAwB;IACjD,IAAIA,KAAK,CAACA,KAAK,YAAYC,UAAU,EAAE;MACpCC,OAAO,CAACF,KAAK,CAAC,mDAAmD,GAAGA,KAAK,CAACG,OAAO,CAAC;KACpF,MAAM;MACJD,OAAO,CAACF,KAAK,CACV,uDAAuD,GAAIA,KAAK,CAACI,MAAM,GAAG,6BAA6B,GAAGJ,KAAK,CAACG,OAAO,CAAC;;IAG9H,OAAOd,UAAU,CAAC,iCAAiC,CAAC;EACtD;EAEEgB,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IAEtCL,OAAO,CAACM,GAAG,CAACF,QAAQ,CAAC;IACrBJ,OAAO,CAACM,GAAG,CAACD,QAAQ,CAAC;IAErB,IAAI,CAACV,IAAI,CAACY,IAAI,CAAC,mCAAmC,EAAC;MAACH,QAAQ,EAACA,QAAQ;MAACC,QAAQ,EAACA;IAAQ,CAAC,EAAE,IAAI,CAACG,WAAW,CAAC,CAC3GC,IAAI,CACFlB,KAAK,CAAC,CAAC,CAAC,EACRD,UAAU,CAAC,IAAI,CAACO,gBAAgB,CAAC,CAAC,CACpCa,SAAS,CAAGC,IAAI,IAAKX,OAAO,CAACM,GAAG,CAACK,IAAI,EAAC,aAAa,CAAC,CAAE;IAEtD,IAAI,CAACC,cAAc,GAAGR,QAAQ,IAAI,OAAO,IAAIC,QAAQ,IAAI,OAAO;IAChEQ,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAACF,cAAc,GAAG,MAAM,GAAG,OAAO,CAAC;IAE9E,OAAO1B,EAAE,CAAC,IAAI,CAAC0B,cAAc,CAAC,CAACH,IAAI,CAC/BpB,KAAK,CAAC,IAAI,CAAC,EACXD,GAAG,CAAC2B,GAAG,IAAG;MACRf,OAAO,CAACM,GAAG,CAAC,wCAAwC,GAAGS,GAAG,CAAC;IAC7D,CAAC,CAAC,CACL;EAEJ;EAEAC,MAAM;IACL,IAAI,CAACJ,cAAc,GAAG,KAAK;IACxBC,YAAY,CAACI,UAAU,CAAC,gBAAgB,CAAC;EAC5C;;AArDWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;EAAA0B,YAHV;AAAM","names":["of","throwError","tap","delay","catchError","retry","HttpHeaders","AuthService","constructor","http","headers","httpErrorHandler","error","ErrorEvent","console","message","status","login","userName","password","log","post","httpOptions","pipe","subscribe","data","isUserLoggedIn","localStorage","setItem","val","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Admin\\Desktop\\angularjs\\authapp\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Observable, of, throwError  } from 'rxjs';\n\nimport { tap, delay } from 'rxjs/operators';\n\nimport { catchError, retry } from 'rxjs/operators';\n\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthService {\n\n  constructor(private http:HttpClient) { }\n\n  isUserLoggedIn: boolean = false;\n\n   httpOptions = {\n    headers: new HttpHeaders( { \n      'Content-Type': 'application/json',\n                'Access-Control-Allow-Origin': '*',\n                'Access-Control-Allow-Credentials': 'true',\n                'Access-Control-Allow-Headers': 'Content-Type',\n                'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE'\n    })\n };\n\n private httpErrorHandler (error: HttpErrorResponse) {\n  if (error.error instanceof ErrorEvent) {\n     console.error(\"A client side error occurs. The error message is \" + error.message);\n  } else {\n     console.error(\n        \"An error happened in server. The HTTP status code is \"  + error.status + \" and the error returned is \" + error.message);\n  }\n\n  return throwError(\"Error occurred. Pleas try again\");\n}\n\n  login(userName: string, password: string): Observable<any> {\n\n    console.log(userName);\n    console.log(password);\n\n    this.http.post(\"http://localhost:8081/login/check\",{userName:userName,password:password}, this.httpOptions) \n   .pipe( \n      retry(1), \n      catchError(this.httpErrorHandler)) \n   .subscribe( (data) => console.log(data,\"hello world\") )\n\n    this.isUserLoggedIn = userName == 'admin' && password == 'admin';\n    localStorage.setItem('isUserLoggedIn', this.isUserLoggedIn ? \"true\" : \"false\"); \n\n    return of(this.isUserLoggedIn).pipe(\n        delay(1000),\n        tap(val => { \n          console.log(\"Is User Authentication is successful: \" + val); \n        })\n    );\n    \n }\n\n logout() {\n  this.isUserLoggedIn = false;\n     localStorage.removeItem('isUserLoggedIn'); \n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}